!<arch>
0-isupper.c/    0           0     0     644     213       `
#include"main.h"
/**
 *_isupper - function to check for uppercse character
 *
 * @c: parameter
 * Return: 0
 */
int _isupper(int c)
{
	if (_isupper(c))
	{
		return (1);
	}
	else
	{
		return (0);
	}
	return (0);
}

0-memset.c/     0           0     0     644     243       `
#include"main.h"
/**
 * _memset - function
 *
 * @s: character
 * @b: character
 * @n: no of bits
 *
 * Return: s
 */
char *_memset(char *s, char b, unsigned int n)
{
	unsigned int i;

	for (i = 0; i < n; i++)
	{
		s[i] = b;
	}
	return (s);
}

0-strcat.c/     0           0     0     644     265       `
#include"main.h"
/**
 * _srtcat - function
 * @dest: variable
 * @str: variable
 * Return: dest
 */
char *_strcat(char *dest, char *src)
{
	int i;

	int h;

	for (i = 0; dest[i]; i++)
		;
	for (h = 0; src[h]; h++)
	{
		dest[i] = src[h];
		i++;
	}
	return (dest);
}

1-isdigit.c/    0           0     0     644     217       `
#include"main.h"
/**
 *_isdigit - function to check for digits
 *
 * @c: parameter
 * Return: 0
 */
int _isdigit(int c)
{
	if (c >= '0' && c <= '9')
	{
		c++;
		return (1);
	}
	else
	{
		return (0);
	}
	return (0);
}

1-memcpy.c/     0           0     0     644     274       `
#include"main.h"
/**
 * _memcpy - function
 *
 * @dest: character
 *
 * @src: character
 *
 * @n: no of bits
 *
 * Return: dest
 */
char *_memcpy(char *dest, char *src, unsigned int n)
{
	unsigned int i;

	for (i = 0; i < n; i++)
	{
		src[i] = dest[i];
	}
	return (dest);
}
1-strncat.c/    0           0     0     644     357       `
#include"main.h"
/**
* _strncat - function
* @dest: destination of copy
* @src: source of copy
* @n: string limit of copy
*
*
* Return: dest
*/
char *_strncat(char *dest, char *src, int n)
{
	int len, len2;

	for (len = 0; dest[len]; len++)
		;
	for (len2 = 0; src[len2]; len2++)
	{
		if (n > len2)
			dest[len] = src[len2];
			len++;
	}
	return (dest);
}


2-strchr.c/     0           0     0     644     303       `
#include"main.h"
#define NULL 0
/**
 * _strchr - function
 *
 *
 * @s: character
 * @c: character
 *
 * Return: defined
 */
char *_strchr(char *s, char c)
{
	for (; ; s++)
	{
		if (*s == c)
		{
			return (s);
		}
		if (*s == c && c == NULL)
		return (s);
	if (*s == NULL)
		break;
	}
	return (NULL);
}


2-strlen.c/     0           0     0     644     201       `
#include"main.h"
#include<string.h>
/**
 *_strlen - function
 *
 *@s: pointer
 *Return: index
 */
int _strlen(char *s)
{
	int index = 0;

	while (*s != '\0')
	{
		index++;
		s++;
	}
	return (index);
}

2-strncpy.c/    0           0     0     644     241       `
#include"main.h"
/**
 *
 *
 *
 *
 */
char *_strncpy(char *dest, char *src, int n)
{
	int len;

	for (len = 0; src[len]; len++)
	{
		if (n > len)
		dest[len] = src[len];
	}
	for ( ; n > len; len++)
	{
		dest[len] = '\0';
	}
	return (dest);
}

3-puts.c/       0           0     0     644     175       `
#include"main.h"
/**
 *_puts - function
 *
 *@str: pointer
 *Return: none
 */
void _puts(char *str)
{
	while (*str != '\0')
	{
		_putchar(*str);
		str++;
	}
	_putchar(10);

}

3-strcmp.c/     0           0     0     644     273       `
#include"main.h"
/**
 * _strcmp - function
 * @s1: parsrmeter
 * @s2: parameter
 * Return: difference
 */
int _strcmp(char *s1, char *s2)
{
	int i;

	for (i = 0; s1[i]; i++)
	{
		if (s1[i] == s2[i])
		{
	 		i++;
		}
		else
		{
			break;
		}
	}
		return (s1[i] - s2[i]);
}


3-strspn.c/     0           0     0     644     466       `
#include"main.h"
#define NULL 0
/**
* _strspn - function
* @s: character
* @accept: bytes from
*
*Return: s
*/
unsigned int _strspn(char *s, char *accept)
{
	int i, j, counter;

	counter = 0;

	if (*s == NULL || *accept == NULL)
		return (0);

	for (i = 0; s[i]; i++)
	{
		for (j = 0; accept[j]; j++)
		{
			if (s[i] == accept[j])
			{
				counter++;
				break;
			}
			else if (*(accept + j + 1) == '\0')
			{
				return (counter);
			}
		}
	}
	return (counter);
}
4-isalpha.c/    0           0     0     644     370       `
#include "main.h"
/**
* _isalpha - checks for alphabetic character
* @c: First operand
*
* Description: checks for lower and upper alpha chars
* Return:1 if c is a letter, lowercase or uppercase, 0 otherwise
*/
int _isalpha(int c)
{
	if (c >= 65 && c <= 90)
	{
		return (1);
	}
	else if (c >= 97 && c <= 122)
	{
		return (1);
	}
	else
	{
		return (0);
	}
	return (c);
}
4-strpbrk.c/    0           0     0     644     329       `
#include"main.h"
#define NULL 0
/**
 * _strpbrk - function
 * @s: pointer
 * @accept: pointer
 *
 * Return: 0
 */
char *_strpbrk(char *s, char *accept)
{
	int i;

	int j;

	for (i = 0; s[1]; i++)
	{
		for (j = 0; accept[j]; j++)
		{
			if (s[i] == accept[j])
			{
				return (&s[i]);
			}
		}
	}
	return (NULL);

	return (0);
}


5-strstr.c/     0           0     0     644     490       `
#include"main.h"
#define NULL 0
/**
* _strstr - function
* @haystack: string
* @needle:  string
*
*Return: pointer to begin at substring or null
*/
char *_strstr(char *haystack, char *needle)
{
	int c = 0;
	int c2 = 0;

	if (needle[0] == '\0')
	{
		return (&haystack[0]);
	}

	while (haystack[c])
	{
		if (haystack[c] == needle[c2])
		{
			c++;
			c2++;

			if (needle[c2] == '\0')
				return (&haystack[c - c2]);
		}
		else
		{
			c++;
			c = (c - c2);
			c2 = 0;
		}
	}
	return ('\0');
}
9-strcpy.c/     0           0     0     644     255       `
#include"main.h"
/**
 *@_strcpy - function
 *_strcpy - function
 *@src: pointer
 *@dest: pointer
 *Rerurn: char
 */
char *_strcpy(char *dest, char *src)
{
	int i;

	for (i = 0; i < src[i]; i++)
	{
		dest[i] = src[i];
	}
	dest[i] = '\0';
	return (dest);
}

_putchar.c/     0           0     0     644     247       `
#include <unistd.h>

/**
 * _putchar - writes the character c to stdout
 * @c: The character to print
 *
 * Return: On success 1.
 * On error, -1 is returned, and errno is set appropriately.
 */
int _putchar(char c)
{
	return (write(1, &c, 1));
}

